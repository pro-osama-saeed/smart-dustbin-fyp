#include <WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h" // always include thingspeak header file after other header files and custom macros

char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;
int keyIndex = 0;
WiFiClient  client;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

String myStatus = "";

#include <LiquidCrystal_PCF8574.h>
#include <Wire.h>

LiquidCrystal_PCF8574 lcd(0x27); // LCD address 0x27

const int trigPin = 18;
const int echoPin = 19;
const int wetsensor = 34;
int wet;

#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701
int dd;
long duration;
float distanceCm;
float distanceInch;

int led = 2;
#define REPORTING_PERIOD_MS 15000  // Reporting time changed to 15 seconds
uint32_t tsLastReport = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial);

  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);

  Wire.begin();
  Wire.beginTransmission(0x27);
  lcd.begin(16, 2);
  lcd.setBacklight(255);
  pinMode(wetsensor, INPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(led, OUTPUT);

  lcd.setCursor(0, 0);
  lcd.print("*SMART DUSTBIN*");
  delay(2000);
  lcd.clear();
}

void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, pass);
      Serial.print(".");
      digitalWrite(led, LOW);
      delay(5000);
    }
    Serial.println("\nConnected.");
    digitalWrite(led, HIGH);
  }

  wet = analogRead(wetsensor);
  US();

  Serial.print("wet : ");
  Serial.println(wet);

  if (wet < 3000)
    lcd.setCursor(0, 1), lcd.print("*RAIN*");
  else
    lcd.setCursor(0, 1), lcd.print("*SUN* ");

  dd = map(distanceCm, 0, 58, 58, 0);

  if (distanceCm > 55) {
    lcd.setCursor(0, 0);
    lcd.print("*Empty* ");
    myStatus = "UC78, DUSTBIN IS EMPTY";
    ThingSpeak.setStatus(myStatus);
  } else if ((distanceCm < 40) && (distanceCm > 30)) {
    lcd.setCursor(0, 0);
    lcd.print("*Middle*");
    myStatus = "UC78, DUSTBIN IS Middle";
    ThingSpeak.setStatus(myStatus);
  } else if (distanceCm < 10) {
    lcd.setCursor(0, 0);
    lcd.print("**Full**");
    myStatus = "UC78, DUSTBIN IS Full";
    ThingSpeak.setStatus(myStatus);
  }

  if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
    ts();
    tsLastReport = millis();
  }
}

void ts() {
  ThingSpeak.setField(1, dd);
  ThingSpeak.setField(2, wet);

  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (x == 200)
    Serial.println("Channel update successful.");
  else
    Serial.println("Problem updating channel. HTTP error code " + String(x));
}

void US() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);

  distanceCm = duration * SOUND_SPEED / 2;
  distanceInch = distanceCm * CM_TO_INCH;

  Serial.print("Distance (Cm): ");
  Serial.println(distanceCm);
  delay(500);
  lcd.setCursor(9, 0);
  lcd.print("CM: ");
  lcd.print(distanceCm);
}
